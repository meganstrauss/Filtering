import numpy as np
from matplotlib import pyplot as plt
import cv2
import pandas as pd
import random
'''
add 3 dimentions, make H no longer a square matrix
'''


class Kalman:
    def __init__(self, F, z, true, P, R, H, startState, startCov):
        self.F = F
        self.z = z
        self.P = P
        self.R = R
        self.H = H
        self.startState = startState
        self.startCov = startCov
        self.true = true

        # result tracking
        self.predictions = []
        self.states = []
    def predict(self, x, P):
        # needs to return underlying state vector, taking in observation sized vector
        # F needs to be size 3x2
        prediction = np.matmul(np.transpose(self.F), x)
        covariance = np.matmul(np.matmul(self.F, P), np.transpose(self.F))
        return (prediction, covariance)
    def update(self, z, x, P):
        # x is state
        # z is observation
        # P is covariance

        # Hx needs to return observation sized vector, taking in state size 
        # H needs to be size 2x3
        y = z-np.matmul(self.H, x) # z - Hx
        print(y)

        S = np.matmul(np.matmul(self.H, P), np.transpose(self.H)) + self.R # HPH^t + R
        K = np.matmul(np.matmul(P, np.transpose(self.H)), np.linalg.inv(S)) # PHS^-1
        
        state = x + np.matmul(K, y) # x + Ky
        kh = np.matmul(K, self.H) # KH
        kh = (np.identity(np.shape(kh)[0])) - kh # I-KH
        covariance = np.matmul(kh, P)
        return (state, covariance)
    def main(self):
        state, covariancePre = self.startState, self.startCov
        #transpose = np.transpose(self.z)
        state, covariancePost = self.update(self.z[:,0], self.startState, covariancePre)
        for k in range(1, len(self.z[0])):
            prediction, covariancePre = self.predict(state, covariancePost)
            self.predictions.append(prediction)
            state, covariancePost = self.update(self.z[:, k], prediction, covariancePre)
            state[0] += 1
            state[1] -= 1
            self.states.append(state)
        self.states = np.array(self.states)
        self.predictions = np.array(self.predictions)
    def show(self):
        #t = np.array([i for i in range(len(self.z[0]))])
        t = [i for i in range(101)]
        plt.plot(t, self.z[0], t, self.true[0], [x[0] for x in self.predictions])
        #plt.plot(t[:100], [x[0] for x in self.predictions])
        #plt.plot(t, [x[0] for x in self.z], t, [x[0] for x in self.true], t, [x[0] for x in self.predictions])
        plt.show()

def test():
    data = np.array([[10, 0, 0], [11.0, 4.0, -2.0], [13.0, 9.0, 4.0], [13.0, 15.0, 9.0], [15.0, 20.0, 14.0], [16.0, 27.0, 20.0], [17.0, 34.0, 26.0], [17.0, 42.0, 37.0], [17.0, 49.0, 42.0], [18.0, 57.0, 49.0], [19.0, 65.0, 56.0], [19.0, 75.0, 64.0], [21.0, 84.0, 74.0], [20.0, 93.0, 84.0], [20.0, 103.0, 92.0], [20.0, 114.0, 103.0], [19.0, 124.0, 114.0], [23.0, 137.0, 123.0], [23.0, 146.0, 134.0], [24.0, 156.0, 144.0], [26.0, 166.0, 155.0], [28.0, 178.0, 166.0], [29.0, 191.0, 177.0], [31.0, 205.0, 192.0], [31.0, 220.0, 206.0], [33.0, 235.0, 222.0], [33.0, 252.0, 235.0], [34.0, 268.0, 250.0], [33.0, 282.0, 266.0], [35.0, 300.0, 281.0], [36.0, 318.0, 300.0], [37.0, 336.0, 316.0], [37.0, 353.0, 338.0], [39.0, 370.0, 353.0], [40.0, 390.0, 370.0], [41.0, 409.0, 392.0], [41.0, 429.0, 409.0], [42.0, 448.0, 429.0], [43.0, 468.0, 449.0], [43.0, 490.0, 467.0], [43.0, 511.0, 489.0], [44.0, 532.0, 511.0], [45.0, 555.0, 531.0], [45.0, 575.0, 553.0], [48.0, 597.0, 575.0], [49.0, 618.0, 598.0], [50.0, 643.0, 619.0], [52.0, 666.0, 642.0], [53.0, 690.0, 666.0], [54.0, 717.0, 690.0], [55.0, 742.0, 717.0], [56.0, 770.0, 741.0], [57.0, 797.0, 771.0], [61.0, 826.0, 796.0], [60.0, 856.0, 826.0], [61.0, 885.0, 856.0], [61.0, 916.0, 886.0], [63.0, 945.0, 917.0], [65.0, 977.0, 946.0], [66.0, 1008.0, 977.0], [68.0, 1040.0, 1009.0], [70.0, 1074.0, 1039.0], [70.0, 1108.0, 1074.0], [71.0, 1143.0, 1108.0], [70.0, 1177.0, 1142.0], [71.0, 1213.0, 1178.0], [73.0, 1248.0, 1212.0], [74.0, 1285.0, 1249.0], [75.0, 1322.0, 1283.0], [78.0, 1358.0, 1321.0], [79.0, 1395.0, 1358.0], [81.0, 1433.0, 1398.0], [83.0, 1474.0, 1433.0], [86.0, 1515.0, 1472.0], [87.0, 1558.0, 1515.0], [89.0, 1601.0, 1559.0], [88.0, 1645.0, 1600.0], [88.0, 1688.0, 1646.0], [91.0, 1733.0, 1688.0], [92.0, 1778.0, 1733.0], [91.0, 1823.0, 1779.0], [91.0, 1868.0, 1823.0], [92.0, 1913.0, 1869.0], [94.0, 1958.0, 1913.0], [95.0, 2004.0, 1959.0], [96.0, 2052.0, 2005.0], [95.0, 2098.0, 2052.0], [98.0, 2147.0, 2097.0], [99.0, 2194.0, 2146.0], [101.0, 2244.0, 2193.0], [102.0, 2295.0, 2243.0], [103.0, 2346.0, 2294.0], [103.0, 2395.0, 2346.0], [105.0, 2446.0, 2394.0], [107.0, 2498.0, 2446.0], [109.0, 2550.0, 2499.0], [109.0, 2605.0, 2550.0], [109.0, 2658.0, 2605.0], [111.0, 2711.0, 2658.0], [110.0, 2766.0, 2710.0], [113.0, 2821.0, 2767.0]])
    true = ([[10, 0, 0], [11.0, 4.0, 0.0], [12.0, 9.0, 4.0], [14.0, 14.0, 9.0], [14.0, 20.0, 15.0], [16.0, 27.0, 20.0], [17.0, 34.0, 27.0], [18.0, 42.0, 34.0], [18.0, 50.0, 42.0], [18.0, 56.0, 49.0], [19.0, 65.0, 57.0], [20.0, 74.0, 65.0], [20.0, 84.0, 75.0], [22.0, 94.0, 84.0], [21.0, 102.0, 93.0], [21.0, 113.0, 103.0], [21.0, 123.0, 114.0], [20.0, 133.0, 124.0], [24.0, 147.0, 137.0], [24.0, 157.0, 146.0], [25.0, 167.0, 156.0], [27.0, 179.0, 166.0], [29.0, 191.0, 178.0], [30.0, 205.0, 191.0], [32.0, 220.0, 205.0], [32.0, 235.0, 220.0], [34.0, 250.0, 235.0], [34.0, 268.0, 252.0], [35.0, 284.0, 268.0], [34.0, 298.0, 282.0], [36.0, 317.0, 300.0], [37.0, 335.0, 318.0], [38.0, 354.0, 336.0], [38.0, 371.0, 353.0], [40.0, 389.0, 370.0], [41.0, 409.0, 390.0], [42.0, 429.0, 409.0], [42.0, 449.0, 429.0], [43.0, 468.0, 448.0], [44.0, 488.0, 468.0], [44.0, 510.0, 490.0], [44.0, 532.0, 511.0], [45.0, 553.0, 532.0], [46.0, 576.0, 555.0], [46.0, 596.0, 575.0], [49.0, 620.0, 597.0], [50.0, 641.0, 618.0], [51.0, 667.0, 643.0], [53.0, 691.0, 666.0], [54.0, 716.0, 690.0], [55.0, 744.0, 717.0], [56.0, 769.0, 742.0], [57.0, 797.0, 770.0], [58.0, 825.0, 797.0], [62.0, 856.0, 826.0], [61.0, 885.0, 856.0], [62.0, 915.0, 885.0], [62.0, 946.0, 916.0], [64.0, 976.0, 945.0], [66.0, 1009.0, 977.0], [67.0, 1041.0, 1008.0], [69.0, 1073.0, 1040.0], [71.0, 1108.0, 1074.0], [71.0, 1142.0, 1108.0], [72.0, 1178.0, 1143.0], [71.0, 1212.0, 1177.0], [72.0, 1248.0, 1213.0], [74.0, 1284.0, 1248.0], [75.0, 1321.0, 1285.0], [76.0, 1359.0, 1322.0], [79.0, 1397.0, 1358.0], [80.0, 1434.0, 1395.0], [82.0, 1473.0, 1433.0], [84.0, 1514.0, 1474.0], [87.0, 1557.0, 1515.0], [88.0, 1601.0, 1558.0], [90.0, 1645.0, 1601.0], [89.0, 1689.0, 1645.0], [89.0, 1731.0, 1688.0], [92.0, 1777.0, 1733.0], [93.0, 1823.0, 1778.0], [92.0, 1867.0, 1823.0], [92.0, 1912.0, 1868.0], [93.0, 1958.0, 1913.0], [95.0, 2004.0, 1958.0], [96.0, 2051.0, 2004.0], [97.0, 2099.0, 2052.0], [96.0, 2145.0, 2098.0], [99.0, 2195.0, 2147.0], [100.0, 2243.0, 2194.0], [102.0, 2294.0, 2244.0], [103.0, 2345.0, 2295.0], [104.0, 2396.0, 2346.0], [104.0, 2446.0, 2395.0], [106.0, 2498.0, 2446.0], [108.0, 2551.0, 2498.0], [110.0, 2604.0, 2550.0], [110.0, 2659.0, 2605.0], [110.0, 2712.0, 2658.0], [112.0, 2765.0, 2711.0], [111.0, 2820.0, 2766.0]])
    true = [(x[0], x[1]) for x in true]
    F = np.array([[1, 0],[0.5, 1]])
    F = np.transpose(F)
    H = np.array([[1, 0, 0],
                  [0, 1, 1]])
    H = np.transpose(H)
    R = np.array([[.000004, 0, 0],
                  [0, .000004, 0],
                  [0, 0, .000004]])
    P = np.array([[.0001, 0],
                  [0, .0001]])
    filter = Kalman(F, np.transpose(data), np.transpose(true), P, R, H, np.array([10, 0]), P)
    filter.main()
    filter.show()
test()


